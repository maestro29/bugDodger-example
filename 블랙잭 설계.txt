==============================================
오전 10:44 2023-06-14
==============================================
설계를 다시 해보자.
 - player-panel
   - player-hand (card-container)
   - player-hand-text (합계 표시)
   - button 5종



class PlayerPanel
생성자
 - 폼 요소 생성
    - dealButton
    - hitButton
    - doubleButton
    - splitButton
    - stayButton
 - 버튼 이벤트 생성 및 연결

변수
 - 핸드(카드) hand[]
 - 딜러 핸드와의 승패 결정이 났는지 여부 roundComplete
 - 더블버튼 비활성화 여부 disableDouble

메서드
 - show
 - hide
 - determineWinner
 - 


updateUI는 전역함수로 가야겠다.
현실세계에서 딜러는 무조건 카드를 하나씩만 줄 수 있으니,
그걸 고려해서 한 번 만 호출하도록 싱크를 맞추자.
대신, 가장 최근에 추가된 핸드부터 드로우를 하자.
그래야만 기존 카드들은 그대로 남아 있으면서 새로운 카드만 
추가되는 듯한 효과를 준다.





============================================
   스플릿 구현
============================================

playerHand[] 는 배열로 만들어야 겠다. (따라서 2차원 배열)


게임 시작 시 디폴트로 
 - drawPlayerTable(1)


만약 스플릿을 누르면,
 - drawPlayerTable(2)
  -> 핸드 
  -> 핸드 그리기
  -> 핸드 합계 텍스트 표시
  -> 5종 버튼 이벤트 생성 및 연결 (두 번째 이상의 핸드의 딜버튼은 항상 비할성화)
       (or 딜 빼던지,)


플레이어의 모든 핸드의 모든 동작이 끝나면, 딜버튼 활성화.

승패 계산. 딜러 vs  플레이어의 모든 핸드

딜버튼을 누르면 첫 핸드를 제외한 나머지 핸드는 삭제.